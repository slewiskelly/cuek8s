// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/mercari/spanner-autoscaler/pkg/api/v1alpha1

package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// ScaleTargetRef defines the target reference for scaling.
#ScaleTargetRef: {
	// +kubebuilder:validation:MinLength=1
	projectId?: null | string @go(ProjectID,*string)

	// +kubebuilder:validation:MinLength=1
	instanceId?: null | string @go(InstanceID,*string)
}

#ServiceAccountSecretRef: {
	// +kubebuilder:validation:MinLength=1
	name?:      null | string @go(Name,*string)
	namespace?: null | string @go(Namespace,*string)

	// +kubebuilder:validation:MinLength=1
	key?: null | string @go(Key,*string)
}

// TargetCPUUtilization defines the utilization of Cloud Spanner CPU
#TargetCPUUtilization: {
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:Maximum=100
	// fraction of the requested CPU that should be utilized/used,
	// e.g. 70 means that 70% of the requested CPU should be in use.
	highPriority?: null | int32 @go(HighPriority,*int32)
}

// SpannerAutoscalerSpec defines the desired state of SpannerAutoscaler
#SpannerAutoscalerSpec: {
	// target reference for scaling.
	scaleTargetRef: #ScaleTargetRef @go(ScaleTargetRef)

	// reference for service account secret.
	serviceAccountSecretRef: #ServiceAccountSecretRef @go(ServiceAccountSecretRef)

	// +kubebuilder:validation:Minimum=1
	// lower limit for the number of nodes that can be set by the autoscaler.
	minNodes?: null | int32 @go(MinNodes,*int32)

	// +kubebuilder:validation:Minimum=1
	// upper limit for the number of nodes that can be set by the autoscaler.
	// It cannot be smaller than MinNodes.
	maxNodes?: null | int32 @go(MaxNodes,*int32)

	// +kubebuilder:validation:Minimum=1
	// +kubebuilder:validation:Optional
	// upper limit for the number of nodes when autoscaler scaledown.
	maxScaleDownNodes?: null | int32 @go(MaxScaleDownNodes,*int32)

	// target average CPU utilization for Spanner.
	targetCPUUtilization: #TargetCPUUtilization @go(TargetCPUUtilization)
}

#InstanceState: string // #enumInstanceState

#enumInstanceState:
	#InstanceStateUnspecified |
	#InstanceStateCreating |
	#InstanceStateReady

#InstanceStateUnspecified: #InstanceState & "unspecified"

// The instance is still being created. Resources may not be
// available yet, and operations such as database creation may not
// work.
#InstanceStateCreating: #InstanceState & "creating"

// The instance is fully created and ready to do work such as
// creating databases.
#InstanceStateReady: #InstanceState & "ready"

// SpannerAutoscalerStatus defines the observed state of SpannerAutoscaler
#SpannerAutoscalerStatus: {
	// last time the SpannerAutoscaler scaled the number of Spanner nodes.
	// used by the autoscaler to control how often the number of nodes is changed.
	lastScaleTime?: null | metav1.#Time @go(LastScaleTime,*metav1.Time)

	// last time the SpannerAutoscaler synced the Spanner status.
	lastSyncTime?: null | metav1.#Time @go(LastSyncTime,*metav1.Time)

	// current number of nodes of Spanner managed by this autoscaler.
	currentNodes?: null | int32 @go(CurrentNodes,*int32)

	// desired number of nodes of Spanner managed by this autoscaler.
	desiredNodes?: null | int32 @go(DesiredNodes,*int32)

	// +kubebuilder:validation:Type=string
	instanceState: #InstanceState @go(InstanceState)

	// current average CPU utilization for high priority task, represented as a percentage.
	currentHighPriorityCPUUtilization?: null | int32 @go(CurrentHighPriorityCPUUtilization,*int32)
}

// SpannerAutoscaler is the Schema for the spannerautoscalers API
#SpannerAutoscaler: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta       @go(ObjectMeta)
	spec?:     #SpannerAutoscalerSpec   @go(Spec)
	status?:   #SpannerAutoscalerStatus @go(Status)
}

// SpannerAutoscalerList contains a list of SpannerAutoscaler
#SpannerAutoscalerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SpannerAutoscaler] @go(Items,[]SpannerAutoscaler)
}
