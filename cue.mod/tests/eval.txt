cue eval ./...
cmp stdout $WORK/stdout.golden

--- stdout.golden --
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development" | "production"
    labels: {
        app:                            "details"
        "app.acme.in/name":             "details"
        "app.acme.in/part-of":          "details"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development" | "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "details"
    region:    "london" | "tokyo"
    serviceID: "details"
    metadata: {
        name:      "details"
        namespace: (resolve.Namespace & {
            environment: X.environment
            serviceID:   X.serviceID
        }).namespace & string
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development" | "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "development" | "production"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development" | "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        name:      "details"
        region:    "london" | "tokyo"
        serviceID: "details"
        metadata: {
            name:      "details"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
        }
    }
    spec: {
        image: {
            name:     "details"
            registry: "gcr.io/details-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 2
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DO_NOT_ENCRYPT: "true"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {}
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service:                 _
        verticalPodAutoscaler:   _
        virtualService:          _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "details"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string
            annotations: {
                "kubectl.kubernetes.io/default-container": "details"
            }
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "details"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: []
                    initContainers: []
                    containers: [{
                        name:  "details"
                        image: "gcr.io/details-prod/details"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DO_NOT_ENCRYPT"
                            value: "true"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: []
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "details"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string & string
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "details"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            scaleTargetRef: {
                name:       "details"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 2
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "details"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    details: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string & string
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "details"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "details"
        "app.acme.in/name":             "details"
        "app.acme.in/part-of":          "details"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "details"
    region:    "london" | "tokyo"
    serviceID: "details"
    metadata: {
        name:      "details"
        namespace: "details-dev"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "development"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        name:      "details"
        region:    "london" | "tokyo"
        serviceID: "details"
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
        }
    }
    spec: {
        image: {
            name:     "details"
            registry: "gcr.io/details-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 1
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DO_NOT_ENCRYPT: "true"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {}
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service:                 _
        verticalPodAutoscaler:   _
        virtualService:          _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "details"
            namespace: "details-dev"
            annotations: {
                "kubectl.kubernetes.io/default-container": "details"
            }
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "details"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: []
                    initContainers: []
                    containers: [{
                        name:  "details"
                        image: "gcr.io/details-prod/details"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DO_NOT_ENCRYPT"
                            value: "true"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: []
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            scaleTargetRef: {
                name:       "details"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 1
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    details: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "details"
        "app.acme.in/name":             "details"
        "app.acme.in/part-of":          "details"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "details"
    region:    "tokyo"
    serviceID: "details"
    metadata: {
        name:      "details"
        namespace: "details-dev"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "dev-tokyo-01"
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "development"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        name:      "details"
        region:    "tokyo"
        serviceID: "details"
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
    }
    spec: {
        image: {
            name:     "details"
            registry: "gcr.io/details-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 1
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DO_NOT_ENCRYPT: "true"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {}
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service:                 _
        verticalPodAutoscaler:   _
        virtualService:          _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "details"
            namespace: "details-dev"
            annotations: {
                "kubectl.kubernetes.io/default-container": "details"
            }
            clusterName: "dev-tokyo-01"
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "details"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: []
                    initContainers: []
                    containers: [{
                        name:  "details"
                        image: "gcr.io/details-prod/details"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DO_NOT_ENCRYPT"
                            value: "true"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: []
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            scaleTargetRef: {
                name:       "details"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 1
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-dev"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    details: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: details
                      namespace: details-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: details
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: details
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: details
                            app.acme.in/name: details
                            app.acme.in/part-of: details
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: details
                              image: gcr.io/details-prod/details
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DO_NOT_ENCRYPT
                                  value: "true"
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: details
                      namespace: details-dev
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: details
                      namespace: details-dev
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: details
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 1
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: details
                      namespace: details-dev
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: details
                          app.acme.in/name: details
                          app.acme.in/part-of: details
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: details
                      namespace: details-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: details
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: details
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: details
                            app.acme.in/name: details
                            app.acme.in/part-of: details
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: details
                              image: gcr.io/details-prod/details
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DO_NOT_ENCRYPT
                                  value: "true"
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: details
                      namespace: details-dev
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: details
                      namespace: details-dev
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: details
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 1
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: details
                      namespace: details-dev
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: details
                          app.acme.in/name: details
                          app.acme.in/part-of: details
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-dev"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-dev"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "details"
        "app.acme.in/name":             "details"
        "app.acme.in/part-of":          "details"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "details"
    region:    "london" | "tokyo"
    serviceID: "details"
    metadata: {
        name:      "details"
        namespace: "details-prod"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "production"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        name:      "details"
        region:    "london" | "tokyo"
        serviceID: "details"
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
        }
    }
    spec: {
        image: {
            name:     "details"
            registry: "gcr.io/details-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 2
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DO_NOT_ENCRYPT: "true"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {}
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service:                 _
        verticalPodAutoscaler:   _
        virtualService:          _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "details"
            namespace: "details-prod"
            annotations: {
                "kubectl.kubernetes.io/default-container": "details"
            }
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "details"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: []
                    initContainers: []
                    containers: [{
                        name:  "details"
                        image: "gcr.io/details-prod/details"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DO_NOT_ENCRYPT"
                            value: "true"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: []
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            scaleTargetRef: {
                name:       "details"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 2
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    details: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "details"
        "app.acme.in/name":             "details"
        "app.acme.in/part-of":          "details"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "details"
    region:    "tokyo"
    serviceID: "details"
    metadata: {
        name:      "details"
        namespace: "details-prod"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "prod-tokyo-01"
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "production"
        labels: {
            app:                            "details"
            "app.acme.in/name":             "details"
            "app.acme.in/part-of":          "details"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        name:      "details"
        region:    "tokyo"
        serviceID: "details"
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
    }
    spec: {
        image: {
            name:     "details"
            registry: "gcr.io/details-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 2
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DO_NOT_ENCRYPT: "true"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {}
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service:                 _
        verticalPodAutoscaler:   _
        virtualService:          _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "details"
            namespace: "details-prod"
            annotations: {
                "kubectl.kubernetes.io/default-container": "details"
            }
            clusterName: "prod-tokyo-01"
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "details"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: []
                    initContainers: []
                    containers: [{
                        name:  "details"
                        image: "gcr.io/details-prod/details"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DO_NOT_ENCRYPT"
                            value: "true"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: []
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            scaleTargetRef: {
                name:       "details"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 2
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "details"
            namespace: "details-prod"
            labels: {
                app:                            "details"
                "app.acme.in/name":             "details"
                "app.acme.in/part-of":          "details"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    details: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: details
                      namespace: details-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: details
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: details
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: details
                            app.acme.in/name: details
                            app.acme.in/part-of: details
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: details
                              image: gcr.io/details-prod/details
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DO_NOT_ENCRYPT
                                  value: "true"
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: details
                      namespace: details-prod
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: details
                      namespace: details-prod
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: details
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: details
                      namespace: details-prod
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: details
                          app.acme.in/name: details
                          app.acme.in/part-of: details
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: details
                      namespace: details-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: details
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: details
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: details
                            app.acme.in/name: details
                            app.acme.in/part-of: details
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: details
                              image: gcr.io/details-prod/details
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DO_NOT_ENCRYPT
                                  value: "true"
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: details
                      namespace: details-prod
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: details
                      namespace: details-prod
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: details
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: details
                      namespace: details-prod
                      labels:
                        app: details
                        app.acme.in/name: details
                        app.acme.in/part-of: details
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: details
                          app.acme.in/name: details
                          app.acme.in/part-of: details
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "details"
                        namespace: "details-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "details"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "details"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "details"
                                    "app.acme.in/name":             "details"
                                    "app.acme.in/part-of":          "details"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "details"
                                    image: "gcr.io/details-prod/details"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DO_NOT_ENCRYPT"
                                        value: "true"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "details"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "details"
                        namespace: "details-prod"
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "details"
                                "app.acme.in/name":             "details"
                                "app.acme.in/part-of":          "details"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "details"
                namespace: "details-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "details"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "details"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "details"
                            "app.acme.in/name":             "details"
                            "app.acme.in/part-of":          "details"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "details"
                            image: "gcr.io/details-prod/details"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DO_NOT_ENCRYPT"
                                value: "true"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "details"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "details"
                namespace: "details-prod"
                labels: {
                    app:                            "details"
                    "app.acme.in/name":             "details"
                    "app.acme.in/part-of":          "details"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "details"
                        "app.acme.in/name":             "details"
                        "app.acme.in/part-of":          "details"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development" | "production"
    labels: {
        app:                            "productpage"
        "app.acme.in/name":             "productpage"
        "app.acme.in/part-of":          "productpage"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development" | "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "productpage"
    region:    "london" | "tokyo"
    serviceID: "productpage"
    metadata: {
        name:      "productpage"
        namespace: (resolve.Namespace & {
            environment: X.environment
            serviceID:   X.serviceID
        }).namespace & string
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development" | "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "development" | "production"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development" | "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        name:      "productpage"
        region:    "london" | "tokyo"
        serviceID: "productpage"
        metadata: {
            name:      "productpage"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
        }
    }
    spec: {
        image: {
            name:     "productpage"
            registry: "gcr.io/productpage-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 2
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DETAILS_HOSTNAME: "details.details-dev"
            RATINGS_HOSTNAME: "ratings.ratings-dev"
            REVIEWS_HOSTNAME: "reviews.reviews-dev"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {
            tmp: {
                name:      "tmp"
                mountPath: "/tmp"
                subPath:   null
                readOnly:  true
                source: {}
            }
        }
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service: {
            spec: {
                type: "NodePort"
            }
        }
        verticalPodAutoscaler: _
        virtualService:        _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "productpage"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string
            annotations: {
                "kubectl.kubernetes.io/default-container": "productpage"
            }
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "productpage"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: [{
                        name: "tmp"
                    }]
                    initContainers: []
                    containers: [{
                        name:  "productpage"
                        image: "gcr.io/productpage-prod/productpage"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DETAILS_HOSTNAME"
                            value: "details.details-dev"
                        }, {
                            name:  "RATINGS_HOSTNAME"
                            value: "ratings.ratings-dev"
                        }, {
                            name:  "REVIEWS_HOSTNAME"
                            value: "reviews.reviews-dev"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: [{
                            name:      "tmp"
                            mountPath: "/tmp"
                            readOnly:  true
                        }]
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string & string
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "NodePort"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            scaleTargetRef: {
                name:       "productpage"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 2
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "productpage"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string & string
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    productpage: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string & string
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "productpage"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "productpage"
        "app.acme.in/name":             "productpage"
        "app.acme.in/part-of":          "productpage"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "productpage"
    region:    "london" | "tokyo"
    serviceID: "productpage"
    metadata: {
        name:      "productpage"
        namespace: "productpage-dev"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "development"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        name:      "productpage"
        region:    "london" | "tokyo"
        serviceID: "productpage"
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
        }
    }
    spec: {
        image: {
            name:     "productpage"
            registry: "gcr.io/productpage-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 1
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DETAILS_HOSTNAME: "details.details-dev"
            RATINGS_HOSTNAME: "ratings.ratings-dev"
            REVIEWS_HOSTNAME: "reviews.reviews-dev"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {
            tmp: {
                name:      "tmp"
                mountPath: "/tmp"
                subPath:   null
                readOnly:  true
                source: {}
            }
        }
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service: {
            spec: {
                type: "NodePort"
            }
        }
        verticalPodAutoscaler: _
        virtualService:        _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "productpage"
            namespace: "productpage-dev"
            annotations: {
                "kubectl.kubernetes.io/default-container": "productpage"
            }
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "productpage"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: [{
                        name: "tmp"
                    }]
                    initContainers: []
                    containers: [{
                        name:  "productpage"
                        image: "gcr.io/productpage-prod/productpage"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DETAILS_HOSTNAME"
                            value: "details.details-dev"
                        }, {
                            name:  "RATINGS_HOSTNAME"
                            value: "ratings.ratings-dev"
                        }, {
                            name:  "REVIEWS_HOSTNAME"
                            value: "reviews.reviews-dev"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: [{
                            name:      "tmp"
                            mountPath: "/tmp"
                            readOnly:  true
                        }]
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "NodePort"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            scaleTargetRef: {
                name:       "productpage"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 1
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    productpage: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "productpage"
        "app.acme.in/name":             "productpage"
        "app.acme.in/part-of":          "productpage"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "productpage"
    region:    "tokyo"
    serviceID: "productpage"
    metadata: {
        name:      "productpage"
        namespace: "productpage-dev"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "dev-tokyo-01"
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "development"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        name:      "productpage"
        region:    "tokyo"
        serviceID: "productpage"
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
    }
    spec: {
        image: {
            name:     "productpage"
            registry: "gcr.io/productpage-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 1
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DETAILS_HOSTNAME: "details.details-dev"
            RATINGS_HOSTNAME: "ratings.ratings-dev"
            REVIEWS_HOSTNAME: "reviews.reviews-dev"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {
            tmp: {
                name:      "tmp"
                mountPath: "/tmp"
                subPath:   null
                readOnly:  true
                source: {}
            }
        }
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service: {
            spec: {
                type: "NodePort"
            }
        }
        verticalPodAutoscaler: _
        virtualService:        _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "productpage"
            namespace: "productpage-dev"
            annotations: {
                "kubectl.kubernetes.io/default-container": "productpage"
            }
            clusterName: "dev-tokyo-01"
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "productpage"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: [{
                        name: "tmp"
                    }]
                    initContainers: []
                    containers: [{
                        name:  "productpage"
                        image: "gcr.io/productpage-prod/productpage"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DETAILS_HOSTNAME"
                            value: "details.details-dev"
                        }, {
                            name:  "RATINGS_HOSTNAME"
                            value: "ratings.ratings-dev"
                        }, {
                            name:  "REVIEWS_HOSTNAME"
                            value: "reviews.reviews-dev"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: [{
                            name:      "tmp"
                            mountPath: "/tmp"
                            readOnly:  true
                        }]
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            type: "NodePort"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            scaleTargetRef: {
                name:       "productpage"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 1
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-dev"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    productpage: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: productpage
                      namespace: productpage-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: productpage
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: productpage
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: productpage
                            app.acme.in/name: productpage
                            app.acme.in/part-of: productpage
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                          initContainers: []
                          containers:
                            - name: productpage
                              image: gcr.io/productpage-prod/productpage
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DETAILS_HOSTNAME
                                  value: details.details-dev
                                - name: RATINGS_HOSTNAME
                                  value: ratings.ratings-dev
                                - name: REVIEWS_HOSTNAME
                                  value: reviews.reviews-dev
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: true
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-dev
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: NodePort
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-dev
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: productpage
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 1
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-dev
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: productpage
                          app.acme.in/name: productpage
                          app.acme.in/part-of: productpage
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: productpage
                      namespace: productpage-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: productpage
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: productpage
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: productpage
                            app.acme.in/name: productpage
                            app.acme.in/part-of: productpage
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                          initContainers: []
                          containers:
                            - name: productpage
                              image: gcr.io/productpage-prod/productpage
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DETAILS_HOSTNAME
                                  value: details.details-dev
                                - name: RATINGS_HOSTNAME
                                  value: ratings.ratings-dev
                                - name: REVIEWS_HOSTNAME
                                  value: reviews.reviews-dev
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: true
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-dev
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: NodePort
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-dev
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: productpage
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 1
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-dev
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: productpage
                          app.acme.in/name: productpage
                          app.acme.in/part-of: productpage
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 1
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-dev"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 1
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-dev"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "productpage"
        "app.acme.in/name":             "productpage"
        "app.acme.in/part-of":          "productpage"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "productpage"
    region:    "london" | "tokyo"
    serviceID: "productpage"
    metadata: {
        name:      "productpage"
        namespace: "productpage-prod"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "production"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        name:      "productpage"
        region:    "london" | "tokyo"
        serviceID: "productpage"
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
        }
    }
    spec: {
        image: {
            name:     "productpage"
            registry: "gcr.io/productpage-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 2
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DETAILS_HOSTNAME: "details.details-dev"
            RATINGS_HOSTNAME: "ratings.ratings-dev"
            REVIEWS_HOSTNAME: "reviews.reviews-dev"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {
            tmp: {
                name:      "tmp"
                mountPath: "/tmp"
                subPath:   null
                readOnly:  true
                source: {}
            }
        }
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service: {
            spec: {
                type: "NodePort"
            }
        }
        verticalPodAutoscaler: _
        virtualService:        _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "productpage"
            namespace: "productpage-prod"
            annotations: {
                "kubectl.kubernetes.io/default-container": "productpage"
            }
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "productpage"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: [{
                        name: "tmp"
                    }]
                    initContainers: []
                    containers: [{
                        name:  "productpage"
                        image: "gcr.io/productpage-prod/productpage"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DETAILS_HOSTNAME"
                            value: "details.details-dev"
                        }, {
                            name:  "RATINGS_HOSTNAME"
                            value: "ratings.ratings-dev"
                        }, {
                            name:  "REVIEWS_HOSTNAME"
                            value: "reviews.reviews-dev"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: [{
                            name:      "tmp"
                            mountPath: "/tmp"
                            readOnly:  true
                        }]
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "NodePort"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            scaleTargetRef: {
                name:       "productpage"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 2
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    productpage: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "productpage"
        "app.acme.in/name":             "productpage"
        "app.acme.in/part-of":          "productpage"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "productpage"
    region:    "tokyo"
    serviceID: "productpage"
    metadata: {
        name:      "productpage"
        namespace: "productpage-prod"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "prod-tokyo-01"
    }
}
App: {
    metadata: {
        annotations: {}
        environment: "production"
        labels: {
            app:                            "productpage"
            "app.acme.in/name":             "productpage"
            "app.acme.in/part-of":          "productpage"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        name:      "productpage"
        region:    "tokyo"
        serviceID: "productpage"
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
    }
    spec: {
        image: {
            name:     "productpage"
            registry: "gcr.io/productpage-prod"
            tag:      null
        }
        minAvailable: "50%"
        scaling: {
            horizontal: {
                minReplicas: 2
                maxReplicas: 3
                metrics: [{
                    resource:    "cpu"
                    utilization: 80
                }]
            }
        }
        updates: {
            rolling: {
                maxSurge:       "50%"
                maxUnavailable: "0%"
            }
        }
        additionalContainers: []
        args: []
        command: []
        env: {
            DETAILS_HOSTNAME: "details.details-dev"
            RATINGS_HOSTNAME: "ratings.ratings-dev"
            REVIEWS_HOSTNAME: "reviews.reviews-dev"
        }
        envFrom: []
        envSpec: {}
        expose: {
            http: {
                name:       "http"
                port:       9080
                protocol:   "tcp"
                targetPort: 9080
            }
        }
        initContainers: []
        network: {
            serviceMesh: null
        }
        port: {}
        resources: {
            requests: {
                cpu:    0.5
                memory: 128000000
            }
            limits: {
                cpu:    0.5
                memory: 128000000
            }
        }
        tolerations: {
            preemptible: false
        }
        volume: {
            tmp: {
                name:      "tmp"
                mountPath: "/tmp"
                subPath:   null
                readOnly:  true
                source: {}
            }
        }
    }
    patch: {
        container:               _
        deployment:              _
        destinationRule:         _
        horizontalPodAutoscaler: _
        podDisruptionBudget:     _
        service: {
            spec: {
                type: "NodePort"
            }
        }
        verticalPodAutoscaler: _
        virtualService:        _
    }
    resource: {
        Deployment: {
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }
        Service: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }
        HorizontalPodAutoscaler: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }
        PodDisruptionBudget: {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }
    }
    resources: [{
        metadata: {
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "productpage"
            namespace: "productpage-prod"
            annotations: {
                "kubectl.kubernetes.io/default-container": "productpage"
            }
            clusterName: "prod-tokyo-01"
        }
        spec: {
            selector: {
                matchLabels: {
                    "app.acme.in/name":    "productpage"
                    "app.acme.in/version": "main"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                }
                spec: {
                    volumes: [{
                        name: "tmp"
                    }]
                    initContainers: []
                    containers: [{
                        name:  "productpage"
                        image: "gcr.io/productpage-prod/productpage"
                        ports: [{
                            containerPort: 9080
                            name:          "http"
                            protocol:      "TCP"
                        }]
                        envFrom: []
                        env: [{
                            name:  "DETAILS_HOSTNAME"
                            value: "details.details-dev"
                        }, {
                            name:  "RATINGS_HOSTNAME"
                            value: "ratings.ratings-dev"
                        }, {
                            name:  "REVIEWS_HOSTNAME"
                            value: "reviews.reviews-dev"
                        }]
                        resources: {
                            requests: {
                                cpu:    0.5
                                memory: 128000000
                            }
                            limits: {
                                cpu:    0.5
                                memory: 128000000
                            }
                        }
                        volumeMounts: [{
                            name:      "tmp"
                            mountPath: "/tmp"
                            readOnly:  true
                        }]
                        livenessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        readinessProbe: {
                            failureThreshold: 3
                            httpGet: {
                                path:   "/health"
                                port:   "http"
                                scheme: "HTTP"
                            }
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            successThreshold:    1
                            timeoutSeconds:      1
                        }
                        securityContext: {
                            privileged:             false
                            readOnlyRootFilesystem: true
                        }
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            ports: [{
                name:       "http"
                port:       9080
                protocol:   "TCP"
                targetPort: 9080
            }]
            selector: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            type: "NodePort"
        }
        kind:       "Service"
        apiVersion: "v1"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            scaleTargetRef: {
                name:       "productpage"
                apiVersion: "apps/v1"
                kind:       "Deployment"
            }
            maxReplicas: 3
            minReplicas: 2
            metrics: [{
                type: "Resource"
                resource: {
                    name: "cpu"
                    target: {
                        type:               "Utilization"
                        averageUtilization: 80
                    }
                }
            }]
            behavior: {
                scaleUp: {
                    stabilizationWindowSeconds: 0
                    policies: [{
                        type:          "Percent"
                        value:         100
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
                scaleDown: {
                    stabilizationWindowSeconds: 60
                    policies: [{
                        type:          "Percent"
                        value:         10
                        periodSeconds: 15
                    }]
                    selectPolicy: "Max"
                }
            }
        }
        kind:       "HorizontalPodAutoscaler"
        apiVersion: "autoscaling/v2beta2"
    }, {
        metadata: {
            name:      "productpage"
            namespace: "productpage-prod"
            labels: {
                app:                            "productpage"
                "app.acme.in/name":             "productpage"
                "app.acme.in/part-of":          "productpage"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            minAvailable: "50%"
            selector: {
                matchLabels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
            }
            maxUnavailable: null
        }
        kind:       "PodDisruptionBudget"
        apiVersion: "policy/v1"
    }]
}
Delivery: {
    productpage: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: productpage
                      namespace: productpage-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: productpage
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: productpage
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: productpage
                            app.acme.in/name: productpage
                            app.acme.in/part-of: productpage
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                          initContainers: []
                          containers:
                            - name: productpage
                              image: gcr.io/productpage-prod/productpage
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DETAILS_HOSTNAME
                                  value: details.details-dev
                                - name: RATINGS_HOSTNAME
                                  value: ratings.ratings-dev
                                - name: REVIEWS_HOSTNAME
                                  value: reviews.reviews-dev
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: true
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-prod
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: NodePort
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-prod
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: productpage
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-prod
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: productpage
                          app.acme.in/name: productpage
                          app.acme.in/part-of: productpage
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: productpage
                      namespace: productpage-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: productpage
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: productpage
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: productpage
                            app.acme.in/name: productpage
                            app.acme.in/part-of: productpage
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                          initContainers: []
                          containers:
                            - name: productpage
                              image: gcr.io/productpage-prod/productpage
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DETAILS_HOSTNAME
                                  value: details.details-dev
                                - name: RATINGS_HOSTNAME
                                  value: ratings.ratings-dev
                                - name: REVIEWS_HOSTNAME
                                  value: reviews.reviews-dev
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: true
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-prod
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: NodePort
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-prod
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: productpage
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: productpage
                      namespace: productpage-prod
                      labels:
                        app: productpage
                        app.acme.in/name: productpage
                        app.acme.in/part-of: productpage
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: productpage
                          app.acme.in/name: productpage
                          app.acme.in/part-of: productpage
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "productpage"
                        namespace: "productpage-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "productpage"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "productpage"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "productpage"
                                    "app.acme.in/name":             "productpage"
                                    "app.acme.in/part-of":          "productpage"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "productpage"
                                    image: "gcr.io/productpage-prod/productpage"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DETAILS_HOSTNAME"
                                        value: "details.details-dev"
                                    }, {
                                        name:  "RATINGS_HOSTNAME"
                                        value: "ratings.ratings-dev"
                                    }, {
                                        name:  "REVIEWS_HOSTNAME"
                                        value: "reviews.reviews-dev"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  true
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "NodePort"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "productpage"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "productpage"
                        namespace: "productpage-prod"
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "productpage"
                                "app.acme.in/name":             "productpage"
                                "app.acme.in/part-of":          "productpage"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "productpage"
                namespace: "productpage-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "productpage"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "productpage"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "productpage"
                            "app.acme.in/name":             "productpage"
                            "app.acme.in/part-of":          "productpage"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "productpage"
                            image: "gcr.io/productpage-prod/productpage"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DETAILS_HOSTNAME"
                                value: "details.details-dev"
                            }, {
                                name:  "RATINGS_HOSTNAME"
                                value: "ratings.ratings-dev"
                            }, {
                                name:  "REVIEWS_HOSTNAME"
                                value: "reviews.reviews-dev"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  true
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "NodePort"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "productpage"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "productpage"
                namespace: "productpage-prod"
                labels: {
                    app:                            "productpage"
                    "app.acme.in/name":             "productpage"
                    "app.acme.in/part-of":          "productpage"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "productpage"
                        "app.acme.in/name":             "productpage"
                        "app.acme.in/part-of":          "productpage"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development" | "production"
    labels: {
        app:                            "ratings"
        "app.acme.in/name":             "ratings"
        "app.acme.in/part-of":          "ratings"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development" | "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "ratings"
    region:    "london" | "tokyo"
    serviceID: "ratings"
    metadata: {
        name:      "ratings"
        namespace: (resolve.Namespace & {
            environment: X.environment
            serviceID:   X.serviceID
        }).namespace & string
        labels: {
            app:                            "ratings"
            "app.acme.in/name":             "ratings"
            "app.acme.in/part-of":          "ratings"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development" | "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    Ratings: {
        metadata: {
            annotations: {}
            environment: "development" | "production"
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "ratings"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            image: {
                name:     "ratings"
                registry: "gcr.io/ratings-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                DB_TYPE:           "mysql"
                MYSQL_DB_HOST:     "mysqldb"
                MYSQL_DB_PORT:     "3306"
                MYSQL_DB_USER:     "root"
                MYSQL_DB_PASSWORD: "password"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {}
        }
        patch: {
            container:               _
            deployment:              _
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    name:      "ratings"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "ratings"
                    }
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "ratings"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: []
                            initContainers: []
                            containers: [{
                                name:  "ratings"
                                image: "gcr.io/ratings-prod/ratings"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "DB_TYPE"
                                    value: "mysql"
                                }, {
                                    name:  "MYSQL_DB_HOST"
                                    value: "mysqldb"
                                }, {
                                    name:  "MYSQL_DB_PORT"
                                    value: "3306"
                                }, {
                                    name:  "MYSQL_DB_USER"
                                    value: "root"
                                }, {
                                    name:  "MYSQL_DB_PASSWORD"
                                    value: "password"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: []
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   10001
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "ratings"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string & string
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "ratings"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    scaleTargetRef: {
                        name:       "ratings"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "ratings"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
ConfigMap: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "development" | "production"
            labels: {
                app:                            "mysql-credentials"
                "app.acme.in/name":             "mysql-credentials"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysql-credentials"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysql-credentials"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: _
        data: {
            rootpasswd: "password"
        }
        patch: {
            configMap: _
        }
        resource: {
            ConfigMap: {
                metadata: {
                    name:      "mysql-credentials"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    labels: {
                        app:                            "mysql-credentials"
                        "app.acme.in/name":             "mysql-credentials"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                data: {
                    rootpasswd: "password"
                }
                kind:       "ConfigMap"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysql-credentials"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }]
    }
}
Deployment: {
    MySQL: {
        metadata: {
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            namespace: (resolve.Namespace & {
                environment: X.environment
                serviceID:   X.serviceID
            }).namespace & string & string
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & string & string
        }
        spec: {
            replicas: 1
            selector: {
                matchLabels: {
                    app: "mysqldb"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                spec: {
                    volumes: [{
                        name: "var-lib-mysql"
                        emptyDir: {}
                    }]
                    containers: [{
                        name:  "mysqldb"
                        image: "docker.io/slewiskelly/acme-mysqldb"
                        ports: [{
                            containerPort: 3306
                        }]
                        env: [{
                            name: "MYSQL_ROOT_PASSWORD"
                            valueFrom: {
                                configMapKeyRef: {
                                    name: "mysql-credentials"
                                    key:  "rootpasswd"
                                }
                            }
                        }]
                        args: ["--default-authentication-plugin", "mysql_native_password"]
                        volumeMounts: [{
                            name:      "var-lib-mysql"
                            mountPath: "/var/lib/mysql"
                        }]
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }
}
Service: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "development" | "production"
            labels: {
                app:                            "mysqldb"
                "app.acme.in/name":             "mysqldb"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysqldb"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            expose: {
                tcp: {
                    name:       "tcp"
                    port:       3306
                    protocol:   "tcp"
                    targetPort: 3306
                }
            }
            selector: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        patch: {
            service: _
        }
        resource: {
            Service: {
                metadata: {
                    name:      "mysqldb"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "mysqldb"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "tcp"
                        port:       3306
                        protocol:   "TCP"
                        targetPort: 3306
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysqldb"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
Delivery: {
    ratings: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    mysqldb: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & string & string & string & string
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & string & string & string & string
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "mysqldb"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                replicas: 1
                selector: {
                    matchLabels: {
                        app: "mysqldb"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    spec: {
                        volumes: [{
                            name: "var-lib-mysql"
                            emptyDir: {}
                        }]
                        containers: [{
                            name:  "mysqldb"
                            image: "docker.io/slewiskelly/acme-mysqldb"
                            ports: [{
                                containerPort: 3306
                            }]
                            env: [{
                                name: "MYSQL_ROOT_PASSWORD"
                                valueFrom: {
                                    configMapKeyRef: {
                                        name: "mysql-credentials"
                                        key:  "rootpasswd"
                                    }
                                }
                            }]
                            args: ["--default-authentication-plugin", "mysql_native_password"]
                            volumeMounts: [{
                                name:      "var-lib-mysql"
                                mountPath: "/var/lib/mysql"
                            }]
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "mysql-credentials"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "mysqldb"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "ratings"
        "app.acme.in/name":             "ratings"
        "app.acme.in/part-of":          "ratings"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "ratings"
    region:    "london" | "tokyo"
    serviceID: "ratings"
    metadata: {
        name:      "ratings"
        namespace: "ratings-dev"
        labels: {
            app:                            "ratings"
            "app.acme.in/name":             "ratings"
            "app.acme.in/part-of":          "ratings"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    Ratings: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "ratings"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            image: {
                name:     "ratings"
                registry: "gcr.io/ratings-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                DB_TYPE:           "mysql"
                MYSQL_DB_HOST:     "mysqldb"
                MYSQL_DB_PORT:     "3306"
                MYSQL_DB_USER:     "root"
                MYSQL_DB_PASSWORD: "password"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {}
        }
        patch: {
            container:               _
            deployment:              _
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    name:      "ratings"
                    namespace: "ratings-dev"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "ratings"
                    }
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "ratings"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: []
                            initContainers: []
                            containers: [{
                                name:  "ratings"
                                image: "gcr.io/ratings-prod/ratings"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "DB_TYPE"
                                    value: "mysql"
                                }, {
                                    name:  "MYSQL_DB_HOST"
                                    value: "mysqldb"
                                }, {
                                    name:  "MYSQL_DB_PORT"
                                    value: "3306"
                                }, {
                                    name:  "MYSQL_DB_USER"
                                    value: "root"
                                }, {
                                    name:  "MYSQL_DB_PASSWORD"
                                    value: "password"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: []
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   10001
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    scaleTargetRef: {
                        name:       "ratings"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    spec: {
        scaling: {
            horizontal: {
                minReplicas: 1
            }
        }
    }
}
ConfigMap: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "mysql-credentials"
                "app.acme.in/name":             "mysql-credentials"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysql-credentials"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: _
        data: {
            rootpasswd: "password"
        }
        patch: {
            configMap: _
        }
        resource: {
            ConfigMap: {
                metadata: {
                    name:      "mysql-credentials"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "mysql-credentials"
                        "app.acme.in/name":             "mysql-credentials"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                data: {
                    rootpasswd: "password"
                }
                kind:       "ConfigMap"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }]
    }
}
Deployment: {
    MySQL: {
        metadata: {
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            namespace: "ratings-dev"
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & string & string
        }
        spec: {
            replicas: 1
            selector: {
                matchLabels: {
                    app: "mysqldb"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                spec: {
                    volumes: [{
                        name: "var-lib-mysql"
                        emptyDir: {}
                    }]
                    containers: [{
                        name:  "mysqldb"
                        image: "docker.io/slewiskelly/acme-mysqldb"
                        ports: [{
                            containerPort: 3306
                        }]
                        env: [{
                            name: "MYSQL_ROOT_PASSWORD"
                            valueFrom: {
                                configMapKeyRef: {
                                    name: "mysql-credentials"
                                    key:  "rootpasswd"
                                }
                            }
                        }]
                        args: ["--default-authentication-plugin", "mysql_native_password"]
                        volumeMounts: [{
                            name:      "var-lib-mysql"
                            mountPath: "/var/lib/mysql"
                        }]
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }
}
Service: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "mysqldb"
                "app.acme.in/name":             "mysqldb"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            expose: {
                tcp: {
                    name:       "tcp"
                    port:       3306
                    protocol:   "tcp"
                    targetPort: 3306
                }
            }
            selector: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        patch: {
            service: _
        }
        resource: {
            Service: {
                metadata: {
                    name:      "mysqldb"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "mysqldb"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "tcp"
                        port:       3306
                        protocol:   "TCP"
                        targetPort: 3306
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
Delivery: {
    ratings: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    mysqldb: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & string & string & string & string
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & string & string & string & string
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "mysqldb"
                namespace: "ratings-dev"
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                replicas: 1
                selector: {
                    matchLabels: {
                        app: "mysqldb"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    spec: {
                        volumes: [{
                            name: "var-lib-mysql"
                            emptyDir: {}
                        }]
                        containers: [{
                            name:  "mysqldb"
                            image: "docker.io/slewiskelly/acme-mysqldb"
                            ports: [{
                                containerPort: 3306
                            }]
                            env: [{
                                name: "MYSQL_ROOT_PASSWORD"
                                valueFrom: {
                                    configMapKeyRef: {
                                        name: "mysql-credentials"
                                        key:  "rootpasswd"
                                    }
                                }
                            }]
                            args: ["--default-authentication-plugin", "mysql_native_password"]
                            volumeMounts: [{
                                name:      "var-lib-mysql"
                                mountPath: "/var/lib/mysql"
                            }]
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "ratings"
        "app.acme.in/name":             "ratings"
        "app.acme.in/part-of":          "ratings"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "ratings"
    region:    "tokyo"
    serviceID: "ratings"
    metadata: {
        name:      "ratings"
        namespace: "ratings-dev"
        labels: {
            app:                            "ratings"
            "app.acme.in/name":             "ratings"
            "app.acme.in/part-of":          "ratings"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "dev-tokyo-01"
    }
}
App: {
    Ratings: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "ratings"
            region:    "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
        }
        spec: {
            image: {
                name:     "ratings"
                registry: "gcr.io/ratings-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                DB_TYPE:           "mysql"
                MYSQL_DB_HOST:     "mysqldb"
                MYSQL_DB_PORT:     "3306"
                MYSQL_DB_USER:     "root"
                MYSQL_DB_PASSWORD: "password"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {}
        }
        patch: {
            container:               _
            deployment:              _
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    name:      "ratings"
                    namespace: "ratings-dev"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "ratings"
                    }
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "ratings"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: []
                            initContainers: []
                            containers: [{
                                name:  "ratings"
                                image: "gcr.io/ratings-prod/ratings"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "DB_TYPE"
                                    value: "mysql"
                                }, {
                                    name:  "MYSQL_DB_HOST"
                                    value: "mysqldb"
                                }, {
                                    name:  "MYSQL_DB_PORT"
                                    value: "3306"
                                }, {
                                    name:  "MYSQL_DB_USER"
                                    value: "root"
                                }, {
                                    name:  "MYSQL_DB_PASSWORD"
                                    value: "password"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: []
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   10001
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    scaleTargetRef: {
                        name:       "ratings"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    spec: {
        scaling: {
            horizontal: {
                minReplicas: 1
            }
        }
    }
}
ConfigMap: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "mysql-credentials"
                "app.acme.in/name":             "mysql-credentials"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "mysql-credentials"
            region:    "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
        }
        spec: _
        data: {
            rootpasswd: "password"
        }
        patch: {
            configMap: _
        }
        resource: {
            ConfigMap: {
                metadata: {
                    name:      "mysql-credentials"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "mysql-credentials"
                        "app.acme.in/name":             "mysql-credentials"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                data: {
                    rootpasswd: "password"
                }
                kind:       "ConfigMap"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }]
    }
}
Deployment: {
    MySQL: {
        metadata: {
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            namespace: "ratings-dev"
            annotations: {}
            clusterName: "dev-tokyo-01"
        }
        spec: {
            replicas: 1
            selector: {
                matchLabels: {
                    app: "mysqldb"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                spec: {
                    volumes: [{
                        name: "var-lib-mysql"
                        emptyDir: {}
                    }]
                    containers: [{
                        name:  "mysqldb"
                        image: "docker.io/slewiskelly/acme-mysqldb"
                        ports: [{
                            containerPort: 3306
                        }]
                        env: [{
                            name: "MYSQL_ROOT_PASSWORD"
                            valueFrom: {
                                configMapKeyRef: {
                                    name: "mysql-credentials"
                                    key:  "rootpasswd"
                                }
                            }
                        }]
                        args: ["--default-authentication-plugin", "mysql_native_password"]
                        volumeMounts: [{
                            name:      "var-lib-mysql"
                            mountPath: "/var/lib/mysql"
                        }]
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }
}
Service: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "mysqldb"
                "app.acme.in/name":             "mysqldb"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            region:    "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
        }
        spec: {
            expose: {
                tcp: {
                    name:       "tcp"
                    port:       3306
                    protocol:   "tcp"
                    targetPort: 3306
                }
            }
            selector: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        patch: {
            service: _
        }
        resource: {
            Service: {
                metadata: {
                    name:      "mysqldb"
                    namespace: "ratings-dev"
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "mysqldb"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    ports: [{
                        name:       "tcp"
                        port:       3306
                        protocol:   "TCP"
                        targetPort: 3306
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
Delivery: {
    ratings: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: ratings
                      namespace: ratings-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: ratings
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: ratings
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: ratings
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: ratings
                              image: gcr.io/ratings-prod/ratings
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DB_TYPE
                                  value: mysql
                                - name: MYSQL_DB_HOST
                                  value: mysqldb
                                - name: MYSQL_DB_PORT
                                  value: "3306"
                                - name: MYSQL_DB_USER
                                  value: root
                                - name: MYSQL_DB_PASSWORD
                                  value: password
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-dev
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-dev
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: ratings
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-dev
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: ratings
                          app.acme.in/name: ratings
                          app.acme.in/part-of: ratings
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: ratings
                      namespace: ratings-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: ratings
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: ratings
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: ratings
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: ratings
                              image: gcr.io/ratings-prod/ratings
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DB_TYPE
                                  value: mysql
                                - name: MYSQL_DB_HOST
                                  value: mysqldb
                                - name: MYSQL_DB_PORT
                                  value: "3306"
                                - name: MYSQL_DB_USER
                                  value: root
                                - name: MYSQL_DB_PASSWORD
                                  value: password
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-dev
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-dev
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: ratings
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-dev
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: ratings
                          app.acme.in/name: ratings
                          app.acme.in/part-of: ratings
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-dev"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    mysqldb: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: mysqldb
                      namespace: ratings-dev
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: mysqldb
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: mysqldb
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                        spec:
                          volumes:
                            - name: var-lib-mysql
                              emptyDir: {}
                          containers:
                            - name: mysqldb
                              image: docker.io/slewiskelly/acme-mysqldb
                              ports:
                                - containerPort: 3306
                              env:
                                - name: MYSQL_ROOT_PASSWORD
                                  valueFrom:
                                    configMapKeyRef:
                                      name: mysql-credentials
                                      key: rootpasswd
                              args:
                                - --default-authentication-plugin
                                - mysql_native_password
                              volumeMounts:
                                - name: var-lib-mysql
                                  mountPath: /var/lib/mysql
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: mysql-credentials
                      namespace: ratings-dev
                      labels:
                        app: mysql-credentials
                        app.acme.in/name: mysql-credentials
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    data:
                      rootpasswd: password
                    kind: ConfigMap
                    apiVersion: v1
                    ---
                    metadata:
                      name: mysqldb
                      namespace: ratings-dev
                      labels:
                        app: mysqldb
                        app.acme.in/name: mysqldb
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: tcp
                          port: 3306
                          protocol: TCP
                          targetPort: 3306
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: mysqldb
                      namespace: ratings-dev
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: mysqldb
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: mysqldb
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                        spec:
                          volumes:
                            - name: var-lib-mysql
                              emptyDir: {}
                          containers:
                            - name: mysqldb
                              image: docker.io/slewiskelly/acme-mysqldb
                              ports:
                                - containerPort: 3306
                              env:
                                - name: MYSQL_ROOT_PASSWORD
                                  valueFrom:
                                    configMapKeyRef:
                                      name: mysql-credentials
                                      key: rootpasswd
                              args:
                                - --default-authentication-plugin
                                - mysql_native_password
                              volumeMounts:
                                - name: var-lib-mysql
                                  mountPath: /var/lib/mysql
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: mysql-credentials
                      namespace: ratings-dev
                      labels:
                        app: mysql-credentials
                        app.acme.in/name: mysql-credentials
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    data:
                      rootpasswd: password
                    kind: ConfigMap
                    apiVersion: v1
                    ---
                    metadata:
                      name: mysqldb
                      namespace: ratings-dev
                      labels:
                        app: mysqldb
                        app.acme.in/name: mysqldb
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: tcp
                          port: 3306
                          protocol: TCP
                          targetPort: 3306
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-dev"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "mysqldb"
                namespace: "ratings-dev"
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                replicas: 1
                selector: {
                    matchLabels: {
                        app: "mysqldb"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                    }
                    spec: {
                        volumes: [{
                            name: "var-lib-mysql"
                            emptyDir: {}
                        }]
                        containers: [{
                            name:  "mysqldb"
                            image: "docker.io/slewiskelly/acme-mysqldb"
                            ports: [{
                                containerPort: 3306
                            }]
                            env: [{
                                name: "MYSQL_ROOT_PASSWORD"
                                valueFrom: {
                                    configMapKeyRef: {
                                        name: "mysql-credentials"
                                        key:  "rootpasswd"
                                    }
                                }
                            }]
                            args: ["--default-authentication-plugin", "mysql_native_password"]
                            volumeMounts: [{
                                name:      "var-lib-mysql"
                                mountPath: "/var/lib/mysql"
                            }]
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-dev"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "ratings"
        "app.acme.in/name":             "ratings"
        "app.acme.in/part-of":          "ratings"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "ratings"
    region:    "london" | "tokyo"
    serviceID: "ratings"
    metadata: {
        name:      "ratings"
        namespace: "ratings-prod"
        labels: {
            app:                            "ratings"
            "app.acme.in/name":             "ratings"
            "app.acme.in/part-of":          "ratings"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    Ratings: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "ratings"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            image: {
                name:     "ratings"
                registry: "gcr.io/ratings-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                DB_TYPE:           "mysql"
                MYSQL_DB_HOST:     "mysqldb"
                MYSQL_DB_PORT:     "3306"
                MYSQL_DB_USER:     "root"
                MYSQL_DB_PASSWORD: "password"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {}
        }
        patch: {
            container:               _
            deployment:              _
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    name:      "ratings"
                    namespace: "ratings-prod"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "ratings"
                    }
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "ratings"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: []
                            initContainers: []
                            containers: [{
                                name:  "ratings"
                                image: "gcr.io/ratings-prod/ratings"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "DB_TYPE"
                                    value: "mysql"
                                }, {
                                    name:  "MYSQL_DB_HOST"
                                    value: "mysqldb"
                                }, {
                                    name:  "MYSQL_DB_PORT"
                                    value: "3306"
                                }, {
                                    name:  "MYSQL_DB_USER"
                                    value: "root"
                                }, {
                                    name:  "MYSQL_DB_PASSWORD"
                                    value: "password"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: []
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   10001
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    scaleTargetRef: {
                        name:       "ratings"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
ConfigMap: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "mysql-credentials"
                "app.acme.in/name":             "mysql-credentials"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysql-credentials"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: _
        data: {
            rootpasswd: "password"
        }
        patch: {
            configMap: _
        }
        resource: {
            ConfigMap: {
                metadata: {
                    name:      "mysql-credentials"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "mysql-credentials"
                        "app.acme.in/name":             "mysql-credentials"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                data: {
                    rootpasswd: "password"
                }
                kind:       "ConfigMap"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }]
    }
}
Deployment: {
    MySQL: {
        metadata: {
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            namespace: "ratings-prod"
            annotations: {}
            clusterName: resolve.Cluster[X.environment][X.region] & string & string
        }
        spec: {
            replicas: 1
            selector: {
                matchLabels: {
                    app: "mysqldb"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                spec: {
                    volumes: [{
                        name: "var-lib-mysql"
                        emptyDir: {}
                    }]
                    containers: [{
                        name:  "mysqldb"
                        image: "docker.io/slewiskelly/acme-mysqldb"
                        ports: [{
                            containerPort: 3306
                        }]
                        env: [{
                            name: "MYSQL_ROOT_PASSWORD"
                            valueFrom: {
                                configMapKeyRef: {
                                    name: "mysql-credentials"
                                    key:  "rootpasswd"
                                }
                            }
                        }]
                        args: ["--default-authentication-plugin", "mysql_native_password"]
                        volumeMounts: [{
                            name:      "var-lib-mysql"
                            mountPath: "/var/lib/mysql"
                        }]
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }
}
Service: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "mysqldb"
                "app.acme.in/name":             "mysqldb"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            region:    "london" | "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            expose: {
                tcp: {
                    name:       "tcp"
                    port:       3306
                    protocol:   "tcp"
                    targetPort: 3306
                }
            }
            selector: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        patch: {
            service: _
        }
        resource: {
            Service: {
                metadata: {
                    name:      "mysqldb"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "mysqldb"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "tcp"
                        port:       3306
                        protocol:   "TCP"
                        targetPort: 3306
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
Delivery: {
    ratings: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    mysqldb: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & string & string & string & string
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & string & string & string & string
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "mysqldb"
                namespace: "ratings-prod"
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                replicas: 1
                selector: {
                    matchLabels: {
                        app: "mysqldb"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    spec: {
                        volumes: [{
                            name: "var-lib-mysql"
                            emptyDir: {}
                        }]
                        containers: [{
                            name:  "mysqldb"
                            image: "docker.io/slewiskelly/acme-mysqldb"
                            ports: [{
                                containerPort: 3306
                            }]
                            env: [{
                                name: "MYSQL_ROOT_PASSWORD"
                                valueFrom: {
                                    configMapKeyRef: {
                                        name: "mysql-credentials"
                                        key:  "rootpasswd"
                                    }
                                }
                            }]
                            args: ["--default-authentication-plugin", "mysql_native_password"]
                            volumeMounts: [{
                                name:      "var-lib-mysql"
                                mountPath: "/var/lib/mysql"
                            }]
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "ratings"
        "app.acme.in/name":             "ratings"
        "app.acme.in/part-of":          "ratings"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "ratings"
    region:    "tokyo"
    serviceID: "ratings"
    metadata: {
        name:      "ratings"
        namespace: "ratings-prod"
        labels: {
            app:                            "ratings"
            "app.acme.in/name":             "ratings"
            "app.acme.in/part-of":          "ratings"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "prod-tokyo-01"
    }
}
App: {
    Ratings: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "ratings"
            region:    "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
        }
        spec: {
            image: {
                name:     "ratings"
                registry: "gcr.io/ratings-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                DB_TYPE:           "mysql"
                MYSQL_DB_HOST:     "mysqldb"
                MYSQL_DB_PORT:     "3306"
                MYSQL_DB_USER:     "root"
                MYSQL_DB_PASSWORD: "password"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {}
        }
        patch: {
            container:               _
            deployment:              _
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    name:      "ratings"
                    namespace: "ratings-prod"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "ratings"
                    }
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "ratings"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: []
                            initContainers: []
                            containers: [{
                                name:  "ratings"
                                image: "gcr.io/ratings-prod/ratings"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "DB_TYPE"
                                    value: "mysql"
                                }, {
                                    name:  "MYSQL_DB_HOST"
                                    value: "mysqldb"
                                }, {
                                    name:  "MYSQL_DB_PORT"
                                    value: "3306"
                                }, {
                                    name:  "MYSQL_DB_USER"
                                    value: "root"
                                }, {
                                    name:  "MYSQL_DB_PASSWORD"
                                    value: "password"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: []
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   10001
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    scaleTargetRef: {
                        name:       "ratings"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "ratings"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
ConfigMap: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "mysql-credentials"
                "app.acme.in/name":             "mysql-credentials"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "mysql-credentials"
            region:    "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
        }
        spec: _
        data: {
            rootpasswd: "password"
        }
        patch: {
            configMap: _
        }
        resource: {
            ConfigMap: {
                metadata: {
                    name:      "mysql-credentials"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "mysql-credentials"
                        "app.acme.in/name":             "mysql-credentials"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                data: {
                    rootpasswd: "password"
                }
                kind:       "ConfigMap"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }]
    }
}
Deployment: {
    MySQL: {
        metadata: {
            labels: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            namespace: "ratings-prod"
            annotations: {}
            clusterName: "prod-tokyo-01"
        }
        spec: {
            replicas: 1
            selector: {
                matchLabels: {
                    app: "mysqldb"
                }
            }
            revisionHistoryLimit: 5
            strategy: {
                type: "RollingUpdate"
                rollingUpdate: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            template: {
                metadata: {
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                spec: {
                    volumes: [{
                        name: "var-lib-mysql"
                        emptyDir: {}
                    }]
                    containers: [{
                        name:  "mysqldb"
                        image: "docker.io/slewiskelly/acme-mysqldb"
                        ports: [{
                            containerPort: 3306
                        }]
                        env: [{
                            name: "MYSQL_ROOT_PASSWORD"
                            valueFrom: {
                                configMapKeyRef: {
                                    name: "mysql-credentials"
                                    key:  "rootpasswd"
                                }
                            }
                        }]
                        args: ["--default-authentication-plugin", "mysql_native_password"]
                        volumeMounts: [{
                            name:      "var-lib-mysql"
                            mountPath: "/var/lib/mysql"
                        }]
                    }]
                    terminationGracePeriodSeconds: 90
                    securityContext: {
                        runAsNonRoot: true
                        runAsUser:    10001
                        runAsGroup:   10001
                        supplementalGroups: []
                    }
                    imagePullSecrets: [{
                        name: "gcr-image-puller-service-account"
                    }]
                    dnsConfig: {
                        options: [{
                            name:  "ndots"
                            value: "2"
                        }, {
                            name: "single-request-reopen"
                        }]
                    }
                }
            }
        }
        kind:       "Deployment"
        apiVersion: "apps/v1"
    }
}
Service: {
    MySQL: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "mysqldb"
                "app.acme.in/name":             "mysqldb"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "mysqldb"
            region:    "tokyo"
            serviceID: "ratings"
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
        }
        spec: {
            expose: {
                tcp: {
                    name:       "tcp"
                    port:       3306
                    protocol:   "tcp"
                    targetPort: 3306
                }
            }
            selector: {
                app:                            "ratings"
                "app.acme.in/name":             "ratings"
                "app.acme.in/part-of":          "ratings"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            type: "ClusterIP"
        }
        patch: {
            service: _
        }
        resource: {
            Service: {
                metadata: {
                    name:      "mysqldb"
                    namespace: "ratings-prod"
                    labels: {
                        app:                            "mysqldb"
                        "app.acme.in/name":             "mysqldb"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    ports: [{
                        name:       "tcp"
                        port:       3306
                        protocol:   "TCP"
                        targetPort: 3306
                    }]
                    selector: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
        }
        resources: [{
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
Delivery: {
    ratings: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: ratings
                      namespace: ratings-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: ratings
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: ratings
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: ratings
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: ratings
                              image: gcr.io/ratings-prod/ratings
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DB_TYPE
                                  value: mysql
                                - name: MYSQL_DB_HOST
                                  value: mysqldb
                                - name: MYSQL_DB_PORT
                                  value: "3306"
                                - name: MYSQL_DB_USER
                                  value: root
                                - name: MYSQL_DB_PASSWORD
                                  value: password
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-prod
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-prod
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: ratings
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-prod
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: ratings
                          app.acme.in/name: ratings
                          app.acme.in/part-of: ratings
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: ratings
                      namespace: ratings-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: ratings
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: ratings
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: ratings
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes: []
                          initContainers: []
                          containers:
                            - name: ratings
                              image: gcr.io/ratings-prod/ratings
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: DB_TYPE
                                  value: mysql
                                - name: MYSQL_DB_HOST
                                  value: mysqldb
                                - name: MYSQL_DB_PORT
                                  value: "3306"
                                - name: MYSQL_DB_USER
                                  value: root
                                - name: MYSQL_DB_PASSWORD
                                  value: password
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts: []
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-prod
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-prod
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: ratings
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: ratings
                      namespace: ratings-prod
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: ratings
                          app.acme.in/name: ratings
                          app.acme.in/part-of: ratings
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "ratings"
                        namespace: "ratings-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "ratings"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "ratings"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "ratings"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: []
                                initContainers: []
                                containers: [{
                                    name:  "ratings"
                                    image: "gcr.io/ratings-prod/ratings"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "DB_TYPE"
                                        value: "mysql"
                                    }, {
                                        name:  "MYSQL_DB_HOST"
                                        value: "mysqldb"
                                    }, {
                                        name:  "MYSQL_DB_PORT"
                                        value: "3306"
                                    }, {
                                        name:  "MYSQL_DB_USER"
                                        value: "root"
                                    }, {
                                        name:  "MYSQL_DB_PASSWORD"
                                        value: "password"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: []
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "ratings"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "ratings"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "ratings"
                                "app.acme.in/name":             "ratings"
                                "app.acme.in/part-of":          "ratings"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "ratings"
                namespace: "ratings-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "ratings"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "ratings"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: []
                        initContainers: []
                        containers: [{
                            name:  "ratings"
                            image: "gcr.io/ratings-prod/ratings"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "DB_TYPE"
                                value: "mysql"
                            }, {
                                name:  "MYSQL_DB_HOST"
                                value: "mysqldb"
                            }, {
                                name:  "MYSQL_DB_PORT"
                                value: "3306"
                            }, {
                                name:  "MYSQL_DB_USER"
                                value: "root"
                            }, {
                                name:  "MYSQL_DB_PASSWORD"
                                value: "password"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: []
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "ratings"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "ratings"
                namespace: "ratings-prod"
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "ratings"
                        "app.acme.in/name":             "ratings"
                        "app.acme.in/part-of":          "ratings"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    mysqldb: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: mysqldb
                      namespace: ratings-prod
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: mysqldb
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: mysqldb
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                        spec:
                          volumes:
                            - name: var-lib-mysql
                              emptyDir: {}
                          containers:
                            - name: mysqldb
                              image: docker.io/slewiskelly/acme-mysqldb
                              ports:
                                - containerPort: 3306
                              env:
                                - name: MYSQL_ROOT_PASSWORD
                                  valueFrom:
                                    configMapKeyRef:
                                      name: mysql-credentials
                                      key: rootpasswd
                              args:
                                - --default-authentication-plugin
                                - mysql_native_password
                              volumeMounts:
                                - name: var-lib-mysql
                                  mountPath: /var/lib/mysql
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: mysql-credentials
                      namespace: ratings-prod
                      labels:
                        app: mysql-credentials
                        app.acme.in/name: mysql-credentials
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    data:
                      rootpasswd: password
                    kind: ConfigMap
                    apiVersion: v1
                    ---
                    metadata:
                      name: mysqldb
                      namespace: ratings-prod
                      labels:
                        app: mysqldb
                        app.acme.in/name: mysqldb
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: tcp
                          port: 3306
                          protocol: TCP
                          targetPort: 3306
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: mysqldb
                      namespace: ratings-prod
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: mysqldb
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: mysqldb
                            app.acme.in/name: ratings
                            app.acme.in/part-of: ratings
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                        spec:
                          volumes:
                            - name: var-lib-mysql
                              emptyDir: {}
                          containers:
                            - name: mysqldb
                              image: docker.io/slewiskelly/acme-mysqldb
                              ports:
                                - containerPort: 3306
                              env:
                                - name: MYSQL_ROOT_PASSWORD
                                  valueFrom:
                                    configMapKeyRef:
                                      name: mysql-credentials
                                      key: rootpasswd
                              args:
                                - --default-authentication-plugin
                                - mysql_native_password
                              volumeMounts:
                                - name: var-lib-mysql
                                  mountPath: /var/lib/mysql
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: 10001
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: mysql-credentials
                      namespace: ratings-prod
                      labels:
                        app: mysql-credentials
                        app.acme.in/name: mysql-credentials
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    data:
                      rootpasswd: password
                    kind: ConfigMap
                    apiVersion: v1
                    ---
                    metadata:
                      name: mysqldb
                      namespace: ratings-prod
                      labels:
                        app: mysqldb
                        app.acme.in/name: mysqldb
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: tcp
                          port: 3306
                          protocol: TCP
                          targetPort: 3306
                      selector:
                        app: ratings
                        app.acme.in/name: ratings
                        app.acme.in/part-of: ratings
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        replicas: 1
                        selector: {
                            matchLabels: {
                                app: "mysqldb"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "mysqldb"
                                    "app.acme.in/name":             "ratings"
                                    "app.acme.in/part-of":          "ratings"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                            }
                            spec: {
                                volumes: [{
                                    name: "var-lib-mysql"
                                    emptyDir: {}
                                }]
                                containers: [{
                                    name:  "mysqldb"
                                    image: "docker.io/slewiskelly/acme-mysqldb"
                                    ports: [{
                                        containerPort: 3306
                                    }]
                                    env: [{
                                        name: "MYSQL_ROOT_PASSWORD"
                                        valueFrom: {
                                            configMapKeyRef: {
                                                name: "mysql-credentials"
                                                key:  "rootpasswd"
                                            }
                                        }
                                    }]
                                    args: ["--default-authentication-plugin", "mysql_native_password"]
                                    volumeMounts: [{
                                        name:      "var-lib-mysql"
                                        mountPath: "/var/lib/mysql"
                                    }]
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   10001
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "mysql-credentials"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysql-credentials"
                            "app.acme.in/name":             "mysql-credentials"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    data: {
                        rootpasswd: "password"
                    }
                    kind:       "ConfigMap"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "mysqldb"
                        namespace: "ratings-prod"
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "mysqldb"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "tcp"
                            port:       3306
                            protocol:   "TCP"
                            targetPort: 3306
                        }]
                        selector: {
                            app:                            "ratings"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "mysqldb"
                namespace: "ratings-prod"
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                replicas: 1
                selector: {
                    matchLabels: {
                        app: "mysqldb"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "mysqldb"
                            "app.acme.in/name":             "ratings"
                            "app.acme.in/part-of":          "ratings"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                    }
                    spec: {
                        volumes: [{
                            name: "var-lib-mysql"
                            emptyDir: {}
                        }]
                        containers: [{
                            name:  "mysqldb"
                            image: "docker.io/slewiskelly/acme-mysqldb"
                            ports: [{
                                containerPort: 3306
                            }]
                            env: [{
                                name: "MYSQL_ROOT_PASSWORD"
                                valueFrom: {
                                    configMapKeyRef: {
                                        name: "mysql-credentials"
                                        key:  "rootpasswd"
                                    }
                                }
                            }]
                            args: ["--default-authentication-plugin", "mysql_native_password"]
                            volumeMounts: [{
                                name:      "var-lib-mysql"
                                mountPath: "/var/lib/mysql"
                            }]
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   10001
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "mysql-credentials"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysql-credentials"
                    "app.acme.in/name":             "mysql-credentials"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            data: {
                rootpasswd: "password"
            }
            kind:       "ConfigMap"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "mysqldb"
                namespace: "ratings-prod"
                labels: {
                    app:                            "mysqldb"
                    "app.acme.in/name":             "mysqldb"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "tcp"
                    port:       3306
                    protocol:   "TCP"
                    targetPort: 3306
                }]
                selector: {
                    app:                            "ratings"
                    "app.acme.in/name":             "ratings"
                    "app.acme.in/part-of":          "ratings"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development" | "production"
    labels: {
        app:                            "reviews"
        "app.acme.in/name":             "reviews"
        "app.acme.in/part-of":          "reviews"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development" | "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "reviews"
    region:    "london" | "tokyo"
    serviceID: "reviews"
    metadata: {
        name:      "reviews"
        namespace: (resolve.Namespace & {
            environment: X.environment
            serviceID:   X.serviceID
        }).namespace & string
        labels: {
            app:                            "reviews"
            "app.acme.in/name":             "reviews"
            "app.acme.in/part-of":          "reviews"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development" | "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    Reviews: {
        metadata: {
            annotations: {}
            environment: "development" | "production"
            labels: {
                app:                            "reviews"
                "app.acme.in/name":             "reviews"
                "app.acme.in/part-of":          "reviews"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development" | "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "reviews"
            region:    "london" | "tokyo"
            serviceID: "reviews"
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            image: {
                name:     "reviews"
                registry: "gcr.io/reviews-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                LOG_DIR: "/tmp/logs"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {
                tmp: {
                    name:      "tmp"
                    mountPath: "/tmp"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
                "wlp-output": {
                    name:      "wlp-output"
                    mountPath: "/opt/ibm/wlp/output"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
            }
        }
        patch: {
            container: _
            deployment: {
                spec: {
                    template: {
                        spec: {
                            securityContext: {
                                runAsGroup: null
                            }
                        }
                    }
                }
            }
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    name:      "reviews"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "reviews"
                    }
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "reviews"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: [{
                                name: "tmp"
                            }, {
                                name: "wlp-output"
                            }]
                            initContainers: []
                            containers: [{
                                name:  "reviews"
                                image: "gcr.io/reviews-prod/reviews"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "LOG_DIR"
                                    value: "/tmp/logs"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: [{
                                    name:      "tmp"
                                    mountPath: "/tmp"
                                    readOnly:  false
                                }, {
                                    name:      "wlp-output"
                                    mountPath: "/opt/ibm/wlp/output"
                                    readOnly:  false
                                }]
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   null
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "reviews"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string & string
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "reviews"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    scaleTargetRef: {
                        name:       "reviews"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "reviews"
                    namespace: (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & (resolve.Namespace & {
                        environment: X.environment
                        serviceID:   X.serviceID
                    }).namespace & string & string & string
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
Delivery: {
    reviews: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development" | "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string & string
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & (resolve.Namespace & {
                            environment: X.environment
                            serviceID:   X.serviceID
                        }).namespace & string & string & string & string & string
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development" | "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development" | "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & (resolve.Namespace & {
                    environment: X.environment
                    serviceID:   X.serviceID
                }).namespace & string & string & string & string
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development" | "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development" | "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "reviews"
        "app.acme.in/name":             "reviews"
        "app.acme.in/part-of":          "reviews"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "reviews"
    region:    "london" | "tokyo"
    serviceID: "reviews"
    metadata: {
        name:      "reviews"
        namespace: "reviews-dev"
        labels: {
            app:                            "reviews"
            "app.acme.in/name":             "reviews"
            "app.acme.in/part-of":          "reviews"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    Reviews: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "reviews"
                "app.acme.in/name":             "reviews"
                "app.acme.in/part-of":          "reviews"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "reviews"
            region:    "london" | "tokyo"
            serviceID: "reviews"
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            image: {
                name:     "reviews"
                registry: "gcr.io/reviews-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                LOG_DIR: "/tmp/logs"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {
                tmp: {
                    name:      "tmp"
                    mountPath: "/tmp"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
                "wlp-output": {
                    name:      "wlp-output"
                    mountPath: "/opt/ibm/wlp/output"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
            }
        }
        patch: {
            container: _
            deployment: {
                spec: {
                    template: {
                        spec: {
                            securityContext: {
                                runAsGroup: null
                            }
                        }
                    }
                }
            }
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    name:      "reviews"
                    namespace: "reviews-dev"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "reviews"
                    }
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "reviews"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: [{
                                name: "tmp"
                            }, {
                                name: "wlp-output"
                            }]
                            initContainers: []
                            containers: [{
                                name:  "reviews"
                                image: "gcr.io/reviews-prod/reviews"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "LOG_DIR"
                                    value: "/tmp/logs"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: [{
                                    name:      "tmp"
                                    mountPath: "/tmp"
                                    readOnly:  false
                                }, {
                                    name:      "wlp-output"
                                    mountPath: "/opt/ibm/wlp/output"
                                    readOnly:  false
                                }]
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   null
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-dev"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-dev"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    scaleTargetRef: {
                        name:       "reviews"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-dev"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    spec: {
        scaling: {
            horizontal: {
                minReplicas: 1
            }
        }
    }
}
Delivery: {
    reviews: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "development"
    labels: {
        app:                            "reviews"
        "app.acme.in/name":             "reviews"
        "app.acme.in/part-of":          "reviews"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "development"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "reviews"
    region:    "tokyo"
    serviceID: "reviews"
    metadata: {
        name:      "reviews"
        namespace: "reviews-dev"
        labels: {
            app:                            "reviews"
            "app.acme.in/name":             "reviews"
            "app.acme.in/part-of":          "reviews"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "development"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "dev-tokyo-01"
    }
}
App: {
    Reviews: {
        metadata: {
            annotations: {}
            environment: "development"
            labels: {
                app:                            "reviews"
                "app.acme.in/name":             "reviews"
                "app.acme.in/part-of":          "reviews"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "development"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "reviews"
            region:    "tokyo"
            serviceID: "reviews"
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
        }
        spec: {
            image: {
                name:     "reviews"
                registry: "gcr.io/reviews-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                LOG_DIR: "/tmp/logs"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {
                tmp: {
                    name:      "tmp"
                    mountPath: "/tmp"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
                "wlp-output": {
                    name:      "wlp-output"
                    mountPath: "/opt/ibm/wlp/output"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
            }
        }
        patch: {
            container: _
            deployment: {
                spec: {
                    template: {
                        spec: {
                            securityContext: {
                                runAsGroup: null
                            }
                        }
                    }
                }
            }
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    name:      "reviews"
                    namespace: "reviews-dev"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "reviews"
                    }
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "reviews"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: [{
                                name: "tmp"
                            }, {
                                name: "wlp-output"
                            }]
                            initContainers: []
                            containers: [{
                                name:  "reviews"
                                image: "gcr.io/reviews-prod/reviews"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "LOG_DIR"
                                    value: "/tmp/logs"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: [{
                                    name:      "tmp"
                                    mountPath: "/tmp"
                                    readOnly:  false
                                }, {
                                    name:      "wlp-output"
                                    mountPath: "/opt/ibm/wlp/output"
                                    readOnly:  false
                                }]
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   null
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-dev"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-dev"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    scaleTargetRef: {
                        name:       "reviews"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-dev"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "dev-tokyo-01"
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
    spec: {
        scaling: {
            horizontal: {
                minReplicas: 1
            }
        }
    }
}
Delivery: {
    reviews: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: reviews
                      namespace: reviews-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: reviews
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: reviews
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: reviews
                            app.acme.in/name: reviews
                            app.acme.in/part-of: reviews
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                            - name: wlp-output
                          initContainers: []
                          containers:
                            - name: reviews
                              image: gcr.io/reviews-prod/reviews
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: LOG_DIR
                                  value: /tmp/logs
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: false
                                - name: wlp-output
                                  mountPath: /opt/ibm/wlp/output
                                  readOnly: false
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: null
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-dev
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-dev
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: reviews
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-dev
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: reviews
                          app.acme.in/name: reviews
                          app.acme.in/part-of: reviews
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: reviews
                      namespace: reviews-dev
                      annotations:
                        kubectl.kubernetes.io/default-container: reviews
                      clusterName: dev-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: reviews
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: reviews
                            app.acme.in/name: reviews
                            app.acme.in/part-of: reviews
                            app.acme.in/version: main
                            topology.acme.in/environment: development
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                            - name: wlp-output
                          initContainers: []
                          containers:
                            - name: reviews
                              image: gcr.io/reviews-prod/reviews
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: LOG_DIR
                                  value: /tmp/logs
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: false
                                - name: wlp-output
                                  mountPath: /opt/ibm/wlp/output
                                  readOnly: false
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: null
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-dev
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-dev
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: reviews
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-dev
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: development
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: dev-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: reviews
                          app.acme.in/name: reviews
                          app.acme.in/part-of: reviews
                          app.acme.in/version: main
                          topology.acme.in/environment: development
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-dev"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "development"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-dev"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "dev-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "development"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-dev"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: "dev-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "development"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-dev"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "development"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "dev-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "development"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
import (
    "github.com/slewiskelly/cuek8s/pkg/acme/resolve"
    "encoding/yaml"
)

Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "reviews"
        "app.acme.in/name":             "reviews"
        "app.acme.in/part-of":          "reviews"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "london" | "tokyo"
        version:                        "main"
    }
    name:      "reviews"
    region:    "london" | "tokyo"
    serviceID: "reviews"
    metadata: {
        name:      "reviews"
        namespace: "reviews-prod"
        labels: {
            app:                            "reviews"
            "app.acme.in/name":             "reviews"
            "app.acme.in/part-of":          "reviews"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "london" | "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: resolve.Cluster[X.environment][X.region] & string
    }
}
App: {
    Reviews: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "reviews"
                "app.acme.in/name":             "reviews"
                "app.acme.in/part-of":          "reviews"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "london" | "tokyo"
                version:                        "main"
            }
            name:      "reviews"
            region:    "london" | "tokyo"
            serviceID: "reviews"
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string
            }
        }
        spec: {
            image: {
                name:     "reviews"
                registry: "gcr.io/reviews-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                LOG_DIR: "/tmp/logs"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {
                tmp: {
                    name:      "tmp"
                    mountPath: "/tmp"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
                "wlp-output": {
                    name:      "wlp-output"
                    mountPath: "/opt/ibm/wlp/output"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
            }
        }
        patch: {
            container: _
            deployment: {
                spec: {
                    template: {
                        spec: {
                            securityContext: {
                                runAsGroup: null
                            }
                        }
                    }
                }
            }
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    name:      "reviews"
                    namespace: "reviews-prod"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "reviews"
                    }
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "reviews"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: [{
                                name: "tmp"
                            }, {
                                name: "wlp-output"
                            }]
                            initContainers: []
                            containers: [{
                                name:  "reviews"
                                image: "gcr.io/reviews-prod/reviews"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "LOG_DIR"
                                    value: "/tmp/logs"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: [{
                                    name:      "tmp"
                                    mountPath: "/tmp"
                                    readOnly:  false
                                }, {
                                    name:      "wlp-output"
                                    mountPath: "/opt/ibm/wlp/output"
                                    readOnly:  false
                                }]
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   null
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-prod"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-prod"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    scaleTargetRef: {
                        name:       "reviews"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-prod"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
Delivery: {
    reviews: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:     "kubectl"
                stderr:   null
                stdin:    (*null | string) & yaml.MarshalStream(X.resources) & _ & _
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "london" | "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string & string
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "london" | "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "london" | "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string & string
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "london" | "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: resolve.Cluster[X.environment][X.region] & resolve.Cluster[X.environment][X.region] & string & string & string & string
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "london" | "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
// ---
Metadata: {
    annotations: {}
    environment: "production"
    labels: {
        app:                            "reviews"
        "app.acme.in/name":             "reviews"
        "app.acme.in/part-of":          "reviews"
        "app.acme.in/version":          "main"
        "topology.acme.in/environment": "production"
        "topology.acme.in/region":      "tokyo"
        version:                        "main"
    }
    name:      "reviews"
    region:    "tokyo"
    serviceID: "reviews"
    metadata: {
        name:      "reviews"
        namespace: "reviews-prod"
        labels: {
            app:                            "reviews"
            "app.acme.in/name":             "reviews"
            "app.acme.in/part-of":          "reviews"
            "app.acme.in/version":          "main"
            "topology.acme.in/environment": "production"
            "topology.acme.in/region":      "tokyo"
            version:                        "main"
        }
        annotations: {}
        clusterName: "prod-tokyo-01"
    }
}
App: {
    Reviews: {
        metadata: {
            annotations: {}
            environment: "production"
            labels: {
                app:                            "reviews"
                "app.acme.in/name":             "reviews"
                "app.acme.in/part-of":          "reviews"
                "app.acme.in/version":          "main"
                "topology.acme.in/environment": "production"
                "topology.acme.in/region":      "tokyo"
                version:                        "main"
            }
            name:      "reviews"
            region:    "tokyo"
            serviceID: "reviews"
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
        }
        spec: {
            image: {
                name:     "reviews"
                registry: "gcr.io/reviews-prod"
                tag:      null
            }
            minAvailable: "50%"
            scaling: {
                horizontal: {
                    minReplicas: 2
                    maxReplicas: 3
                    metrics: [{
                        resource:    "cpu"
                        utilization: 80
                    }]
                }
            }
            updates: {
                rolling: {
                    maxSurge:       "50%"
                    maxUnavailable: "0%"
                }
            }
            additionalContainers: []
            args: []
            command: []
            env: {
                LOG_DIR: "/tmp/logs"
            }
            envFrom: []
            envSpec: {}
            expose: {
                http: {
                    name:       "http"
                    port:       9080
                    protocol:   "tcp"
                    targetPort: 9080
                }
            }
            initContainers: []
            network: {
                serviceMesh: null
            }
            port: {}
            resources: {
                requests: {
                    cpu:    0.5
                    memory: 128000000
                }
                limits: {
                    cpu:    0.5
                    memory: 128000000
                }
            }
            tolerations: {
                preemptible: false
            }
            volume: {
                tmp: {
                    name:      "tmp"
                    mountPath: "/tmp"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
                "wlp-output": {
                    name:      "wlp-output"
                    mountPath: "/opt/ibm/wlp/output"
                    subPath:   null
                    readOnly:  false
                    source: {}
                }
            }
        }
        patch: {
            container: _
            deployment: {
                spec: {
                    template: {
                        spec: {
                            securityContext: {
                                runAsGroup: null
                            }
                        }
                    }
                }
            }
            destinationRule:         _
            horizontalPodAutoscaler: _
            podDisruptionBudget:     _
            service:                 _
            verticalPodAutoscaler:   _
            virtualService:          _
        }
        resource: {
            Deployment: {
                metadata: {
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    name:      "reviews"
                    namespace: "reviews-prod"
                    annotations: {
                        "kubectl.kubernetes.io/default-container": "reviews"
                    }
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    selector: {
                        matchLabels: {
                            "app.acme.in/name":    "reviews"
                            "app.acme.in/version": "main"
                        }
                    }
                    revisionHistoryLimit: 5
                    strategy: {
                        type: "RollingUpdate"
                        rollingUpdate: {
                            maxSurge:       "50%"
                            maxUnavailable: "0%"
                        }
                    }
                    template: {
                        metadata: {
                            labels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                            annotations: {}
                        }
                        spec: {
                            volumes: [{
                                name: "tmp"
                            }, {
                                name: "wlp-output"
                            }]
                            initContainers: []
                            containers: [{
                                name:  "reviews"
                                image: "gcr.io/reviews-prod/reviews"
                                ports: [{
                                    containerPort: 9080
                                    name:          "http"
                                    protocol:      "TCP"
                                }]
                                envFrom: []
                                env: [{
                                    name:  "LOG_DIR"
                                    value: "/tmp/logs"
                                }]
                                resources: {
                                    requests: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                    limits: {
                                        cpu:    0.5
                                        memory: 128000000
                                    }
                                }
                                volumeMounts: [{
                                    name:      "tmp"
                                    mountPath: "/tmp"
                                    readOnly:  false
                                }, {
                                    name:      "wlp-output"
                                    mountPath: "/opt/ibm/wlp/output"
                                    readOnly:  false
                                }]
                                livenessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                readinessProbe: {
                                    failureThreshold: 3
                                    httpGet: {
                                        path:   "/health"
                                        port:   "http"
                                        scheme: "HTTP"
                                    }
                                    initialDelaySeconds: 5
                                    periodSeconds:       10
                                    successThreshold:    1
                                    timeoutSeconds:      1
                                }
                                securityContext: {
                                    privileged:             false
                                    readOnlyRootFilesystem: true
                                }
                            }]
                            terminationGracePeriodSeconds: 90
                            securityContext: {
                                runAsNonRoot: true
                                runAsUser:    10001
                                runAsGroup:   null
                                supplementalGroups: []
                            }
                            imagePullSecrets: [{
                                name: "gcr-image-puller-service-account"
                            }]
                            dnsConfig: {
                                options: [{
                                    name:  "ndots"
                                    value: "2"
                                }, {
                                    name: "single-request-reopen"
                                }]
                            }
                        }
                    }
                }
                kind:       "Deployment"
                apiVersion: "apps/v1"
            }
            Service: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-prod"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    ports: [{
                        name:       "http"
                        port:       9080
                        protocol:   "TCP"
                        targetPort: 9080
                    }]
                    selector: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    type: "ClusterIP"
                }
                kind:       "Service"
                apiVersion: "v1"
            }
            HorizontalPodAutoscaler: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-prod"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    scaleTargetRef: {
                        name:       "reviews"
                        apiVersion: "apps/v1"
                        kind:       "Deployment"
                    }
                    maxReplicas: 3
                    minReplicas: 2
                    metrics: [{
                        type: "Resource"
                        resource: {
                            name: "cpu"
                            target: {
                                type:               "Utilization"
                                averageUtilization: 80
                            }
                        }
                    }]
                    behavior: {
                        scaleUp: {
                            stabilizationWindowSeconds: 0
                            policies: [{
                                type:          "Percent"
                                value:         100
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                        scaleDown: {
                            stabilizationWindowSeconds: 60
                            policies: [{
                                type:          "Percent"
                                value:         10
                                periodSeconds: 15
                            }]
                            selectPolicy: "Max"
                        }
                    }
                }
                kind:       "HorizontalPodAutoscaler"
                apiVersion: "autoscaling/v2beta2"
            }
            PodDisruptionBudget: {
                metadata: {
                    name:      "reviews"
                    namespace: "reviews-prod"
                    labels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                    annotations: {}
                    clusterName: "prod-tokyo-01"
                }
                spec: {
                    minAvailable: "50%"
                    selector: {
                        matchLabels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                    }
                    maxUnavailable: null
                }
                kind:       "PodDisruptionBudget"
                apiVersion: "policy/v1"
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
Delivery: {
    reviews: {
        context: null
        prune:   false
        apply: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  false
                prune:   false
                arg: ["apply", "", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: reviews
                      namespace: reviews-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: reviews
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: reviews
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: reviews
                            app.acme.in/name: reviews
                            app.acme.in/part-of: reviews
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                            - name: wlp-output
                          initContainers: []
                          containers:
                            - name: reviews
                              image: gcr.io/reviews-prod/reviews
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: LOG_DIR
                                  value: /tmp/logs
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: false
                                - name: wlp-output
                                  mountPath: /opt/ibm/wlp/output
                                  readOnly: false
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: null
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-prod
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-prod
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: reviews
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-prod
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: reviews
                          app.acme.in/name: reviews
                          app.acme.in/part-of: reviews
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        plan: {
            apply: {
                $id:     "exec.Run"
                context: null
                dryRun:  true
                prune:   false
                arg: ["apply", "--dry-run=client", "-f", "-"]
                env: {}
                name:   "kubectl"
                stderr: null
                stdin: """
                    metadata:
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      name: reviews
                      namespace: reviews-prod
                      annotations:
                        kubectl.kubernetes.io/default-container: reviews
                      clusterName: prod-tokyo-01
                    spec:
                      selector:
                        matchLabels:
                          app.acme.in/name: reviews
                          app.acme.in/version: main
                      revisionHistoryLimit: 5
                      strategy:
                        type: RollingUpdate
                        rollingUpdate:
                          maxSurge: 50%
                          maxUnavailable: 0%
                      template:
                        metadata:
                          labels:
                            app: reviews
                            app.acme.in/name: reviews
                            app.acme.in/part-of: reviews
                            app.acme.in/version: main
                            topology.acme.in/environment: production
                            topology.acme.in/region: tokyo
                            app.acme.in/managed-by: kubectl
                            version: main
                          annotations: {}
                        spec:
                          volumes:
                            - name: tmp
                            - name: wlp-output
                          initContainers: []
                          containers:
                            - name: reviews
                              image: gcr.io/reviews-prod/reviews
                              ports:
                                - containerPort: 9080
                                  name: http
                                  protocol: TCP
                              envFrom: []
                              env:
                                - name: LOG_DIR
                                  value: /tmp/logs
                              resources:
                                requests:
                                  cpu: 0.5
                                  memory: 128000000
                                limits:
                                  cpu: 0.5
                                  memory: 128000000
                              volumeMounts:
                                - name: tmp
                                  mountPath: /tmp
                                  readOnly: false
                                - name: wlp-output
                                  mountPath: /opt/ibm/wlp/output
                                  readOnly: false
                              livenessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              readinessProbe:
                                failureThreshold: 3
                                httpGet:
                                  path: /health
                                  port: http
                                  scheme: HTTP
                                initialDelaySeconds: 5
                                periodSeconds: 10
                                successThreshold: 1
                                timeoutSeconds: 1
                              securityContext:
                                privileged: false
                                readOnlyRootFilesystem: true
                          terminationGracePeriodSeconds: 90
                          securityContext:
                            runAsNonRoot: true
                            runAsUser: 10001
                            runAsGroup: null
                            supplementalGroups: []
                          imagePullSecrets:
                            - name: gcr-image-puller-service-account
                          dnsConfig:
                            options:
                              - name: ndots
                                value: "2"
                              - name: single-request-reopen
                    kind: Deployment
                    apiVersion: apps/v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-prod
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      ports:
                        - name: http
                          port: 9080
                          protocol: TCP
                          targetPort: 9080
                      selector:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        version: main
                      type: ClusterIP
                    kind: Service
                    apiVersion: v1
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-prod
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      scaleTargetRef:
                        name: reviews
                        apiVersion: apps/v1
                        kind: Deployment
                      maxReplicas: 3
                      minReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
                      behavior:
                        scaleUp:
                          stabilizationWindowSeconds: 0
                          policies:
                            - type: Percent
                              value: 100
                              periodSeconds: 15
                          selectPolicy: Max
                        scaleDown:
                          stabilizationWindowSeconds: 60
                          policies:
                            - type: Percent
                              value: 10
                              periodSeconds: 15
                          selectPolicy: Max
                    kind: HorizontalPodAutoscaler
                    apiVersion: autoscaling/v2beta2
                    ---
                    metadata:
                      name: reviews
                      namespace: reviews-prod
                      labels:
                        app: reviews
                        app.acme.in/name: reviews
                        app.acme.in/part-of: reviews
                        app.acme.in/version: main
                        topology.acme.in/environment: production
                        topology.acme.in/region: tokyo
                        app.acme.in/managed-by: kubectl
                        version: main
                      annotations: {}
                      clusterName: prod-tokyo-01
                    spec:
                      minAvailable: 50%
                      selector:
                        matchLabels:
                          app: reviews
                          app.acme.in/name: reviews
                          app.acme.in/part-of: reviews
                          app.acme.in/version: main
                          topology.acme.in/environment: production
                          topology.acme.in/region: tokyo
                          version: main
                      maxUnavailable: null
                    kind: PodDisruptionBudget
                    apiVersion: policy/v1

                    """
                stdout:   null
                exitCode: int
                resources: [{
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        name:      "reviews"
                        namespace: "reviews-prod"
                        annotations: {
                            "kubectl.kubernetes.io/default-container": "reviews"
                        }
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        selector: {
                            matchLabels: {
                                "app.acme.in/name":    "reviews"
                                "app.acme.in/version": "main"
                            }
                        }
                        revisionHistoryLimit: 5
                        strategy: {
                            type: "RollingUpdate"
                            rollingUpdate: {
                                maxSurge:       "50%"
                                maxUnavailable: "0%"
                            }
                        }
                        template: {
                            metadata: {
                                labels: {
                                    app:                            "reviews"
                                    "app.acme.in/name":             "reviews"
                                    "app.acme.in/part-of":          "reviews"
                                    "app.acme.in/version":          "main"
                                    "topology.acme.in/environment": "production"
                                    "topology.acme.in/region":      "tokyo"
                                    "app.acme.in/managed-by":       "kubectl"
                                    version:                        "main"
                                }
                                annotations: {}
                            }
                            spec: {
                                volumes: [{
                                    name: "tmp"
                                }, {
                                    name: "wlp-output"
                                }]
                                initContainers: []
                                containers: [{
                                    name:  "reviews"
                                    image: "gcr.io/reviews-prod/reviews"
                                    ports: [{
                                        containerPort: 9080
                                        name:          "http"
                                        protocol:      "TCP"
                                    }]
                                    envFrom: []
                                    env: [{
                                        name:  "LOG_DIR"
                                        value: "/tmp/logs"
                                    }]
                                    resources: {
                                        requests: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                        limits: {
                                            cpu:    0.5
                                            memory: 128000000
                                        }
                                    }
                                    volumeMounts: [{
                                        name:      "tmp"
                                        mountPath: "/tmp"
                                        readOnly:  false
                                    }, {
                                        name:      "wlp-output"
                                        mountPath: "/opt/ibm/wlp/output"
                                        readOnly:  false
                                    }]
                                    livenessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    readinessProbe: {
                                        failureThreshold: 3
                                        httpGet: {
                                            path:   "/health"
                                            port:   "http"
                                            scheme: "HTTP"
                                        }
                                        initialDelaySeconds: 5
                                        periodSeconds:       10
                                        successThreshold:    1
                                        timeoutSeconds:      1
                                    }
                                    securityContext: {
                                        privileged:             false
                                        readOnlyRootFilesystem: true
                                    }
                                }]
                                terminationGracePeriodSeconds: 90
                                securityContext: {
                                    runAsNonRoot: true
                                    runAsUser:    10001
                                    runAsGroup:   null
                                    supplementalGroups: []
                                }
                                imagePullSecrets: [{
                                    name: "gcr-image-puller-service-account"
                                }]
                                dnsConfig: {
                                    options: [{
                                        name:  "ndots"
                                        value: "2"
                                    }, {
                                        name: "single-request-reopen"
                                    }]
                                }
                            }
                        }
                    }
                    kind:       "Deployment"
                    apiVersion: "apps/v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        ports: [{
                            name:       "http"
                            port:       9080
                            protocol:   "TCP"
                            targetPort: 9080
                        }]
                        selector: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        type: "ClusterIP"
                    }
                    kind:       "Service"
                    apiVersion: "v1"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        scaleTargetRef: {
                            name:       "reviews"
                            apiVersion: "apps/v1"
                            kind:       "Deployment"
                        }
                        maxReplicas: 3
                        minReplicas: 2
                        metrics: [{
                            type: "Resource"
                            resource: {
                                name: "cpu"
                                target: {
                                    type:               "Utilization"
                                    averageUtilization: 80
                                }
                            }
                        }]
                        behavior: {
                            scaleUp: {
                                stabilizationWindowSeconds: 0
                                policies: [{
                                    type:          "Percent"
                                    value:         100
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                            scaleDown: {
                                stabilizationWindowSeconds: 60
                                policies: [{
                                    type:          "Percent"
                                    value:         10
                                    periodSeconds: 15
                                }]
                                selectPolicy: "Max"
                            }
                        }
                    }
                    kind:       "HorizontalPodAutoscaler"
                    apiVersion: "autoscaling/v2beta2"
                }, {
                    metadata: {
                        name:      "reviews"
                        namespace: "reviews-prod"
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            "app.acme.in/managed-by":       "kubectl"
                            version:                        "main"
                        }
                        annotations: {}
                        clusterName: "prod-tokyo-01"
                    }
                    spec: {
                        minAvailable: "50%"
                        selector: {
                            matchLabels: {
                                app:                            "reviews"
                                "app.acme.in/name":             "reviews"
                                "app.acme.in/part-of":          "reviews"
                                "app.acme.in/version":          "main"
                                "topology.acme.in/environment": "production"
                                "topology.acme.in/region":      "tokyo"
                                version:                        "main"
                            }
                        }
                        maxUnavailable: null
                    }
                    kind:       "PodDisruptionBudget"
                    apiVersion: "policy/v1"
                }]
            }
        }
        resources: [{
            metadata: {
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                name:      "reviews"
                namespace: "reviews-prod"
                annotations: {
                    "kubectl.kubernetes.io/default-container": "reviews"
                }
                clusterName: "prod-tokyo-01"
            }
            spec: {
                selector: {
                    matchLabels: {
                        "app.acme.in/name":    "reviews"
                        "app.acme.in/version": "main"
                    }
                }
                revisionHistoryLimit: 5
                strategy: {
                    type: "RollingUpdate"
                    rollingUpdate: {
                        maxSurge:       "50%"
                        maxUnavailable: "0%"
                    }
                }
                template: {
                    metadata: {
                        labels: {
                            app:                            "reviews"
                            "app.acme.in/name":             "reviews"
                            "app.acme.in/part-of":          "reviews"
                            "app.acme.in/version":          "main"
                            "topology.acme.in/environment": "production"
                            "topology.acme.in/region":      "tokyo"
                            version:                        "main"
                        }
                        annotations: {}
                    }
                    spec: {
                        volumes: [{
                            name: "tmp"
                        }, {
                            name: "wlp-output"
                        }]
                        initContainers: []
                        containers: [{
                            name:  "reviews"
                            image: "gcr.io/reviews-prod/reviews"
                            ports: [{
                                containerPort: 9080
                                name:          "http"
                                protocol:      "TCP"
                            }]
                            envFrom: []
                            env: [{
                                name:  "LOG_DIR"
                                value: "/tmp/logs"
                            }]
                            resources: {
                                requests: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                                limits: {
                                    cpu:    0.5
                                    memory: 128000000
                                }
                            }
                            volumeMounts: [{
                                name:      "tmp"
                                mountPath: "/tmp"
                                readOnly:  false
                            }, {
                                name:      "wlp-output"
                                mountPath: "/opt/ibm/wlp/output"
                                readOnly:  false
                            }]
                            livenessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            readinessProbe: {
                                failureThreshold: 3
                                httpGet: {
                                    path:   "/health"
                                    port:   "http"
                                    scheme: "HTTP"
                                }
                                initialDelaySeconds: 5
                                periodSeconds:       10
                                successThreshold:    1
                                timeoutSeconds:      1
                            }
                            securityContext: {
                                privileged:             false
                                readOnlyRootFilesystem: true
                            }
                        }]
                        terminationGracePeriodSeconds: 90
                        securityContext: {
                            runAsNonRoot: true
                            runAsUser:    10001
                            runAsGroup:   null
                            supplementalGroups: []
                        }
                        imagePullSecrets: [{
                            name: "gcr-image-puller-service-account"
                        }]
                        dnsConfig: {
                            options: [{
                                name:  "ndots"
                                value: "2"
                            }, {
                                name: "single-request-reopen"
                            }]
                        }
                    }
                }
            }
            kind:       "Deployment"
            apiVersion: "apps/v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                ports: [{
                    name:       "http"
                    port:       9080
                    protocol:   "TCP"
                    targetPort: 9080
                }]
                selector: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                type: "ClusterIP"
            }
            kind:       "Service"
            apiVersion: "v1"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                scaleTargetRef: {
                    name:       "reviews"
                    apiVersion: "apps/v1"
                    kind:       "Deployment"
                }
                maxReplicas: 3
                minReplicas: 2
                metrics: [{
                    type: "Resource"
                    resource: {
                        name: "cpu"
                        target: {
                            type:               "Utilization"
                            averageUtilization: 80
                        }
                    }
                }]
                behavior: {
                    scaleUp: {
                        stabilizationWindowSeconds: 0
                        policies: [{
                            type:          "Percent"
                            value:         100
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                    scaleDown: {
                        stabilizationWindowSeconds: 60
                        policies: [{
                            type:          "Percent"
                            value:         10
                            periodSeconds: 15
                        }]
                        selectPolicy: "Max"
                    }
                }
            }
            kind:       "HorizontalPodAutoscaler"
            apiVersion: "autoscaling/v2beta2"
        }, {
            metadata: {
                name:      "reviews"
                namespace: "reviews-prod"
                labels: {
                    app:                            "reviews"
                    "app.acme.in/name":             "reviews"
                    "app.acme.in/part-of":          "reviews"
                    "app.acme.in/version":          "main"
                    "topology.acme.in/environment": "production"
                    "topology.acme.in/region":      "tokyo"
                    version:                        "main"
                }
                annotations: {}
                clusterName: "prod-tokyo-01"
            }
            spec: {
                minAvailable: "50%"
                selector: {
                    matchLabels: {
                        app:                            "reviews"
                        "app.acme.in/name":             "reviews"
                        "app.acme.in/part-of":          "reviews"
                        "app.acme.in/version":          "main"
                        "topology.acme.in/environment": "production"
                        "topology.acme.in/region":      "tokyo"
                        version:                        "main"
                    }
                }
                maxUnavailable: null
            }
            kind:       "PodDisruptionBudget"
            apiVersion: "policy/v1"
        }]
    }
}
